{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","contact","payload","id","uuidv4","name","number","deleteContact","changeFilter","ContactForm","state","handleChange","e","console","log","target","setState","prevState","value","isContactExists","toLowerCase","props","contacts","items","find","reset","handleSubmit","preventDefault","onSaveContacts","alert","this","className","s","container","onSubmit","label","input","type","onChange","btn","Component","connect","dispatch","filter","currentTarget","placeholder","getFilterContactsByName","allContacts","normalizedFilter","toLocaleLowerCase","includes","visibleContacts","onDeleteContact","list","map","item","text","onClick","App","itemsReducer","createReducer","actions","filterReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6715a4f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1xLca\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const addContact = createAction('contact/add', contact => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name: contact.name,\r\n    number: contact.number,\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction('contact/delete');\r\nexport const changeFilter = createAction('contact/changeFilter');\r\n\r\n// ================================================================\r\n// =======  REDUX without toolkit  ================================\r\n// ================================================================\r\n\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import * as types from './contacts-types';\r\n\r\n// export const addContact = contact => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name: contact.name,\r\n//     number: contact.number,\r\n//   },\r\n// });\r\n\r\n// export const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const changeFilter = contactName => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: contactName,\r\n// });\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/contacts-actions';\r\nimport s from '../ContactForm/ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    contact: { name: '', number: '' },\r\n  };\r\n\r\n  static propTypes = {\r\n    onSaveContacts: PropTypes.func,\r\n  };\r\n\r\n  handleChange = e => {\r\n    console.log(e.target.name);\r\n    this.setState(prevState => {\r\n      const { name, value } = e.target;\r\n      return {\r\n        contact: { ...prevState.contact, [name]: value },\r\n      };\r\n    });\r\n  };\r\n\r\n  isContactExists = name => {\r\n    name = name.toLowerCase();\r\n    return this.props.state.contacts.items.find(\r\n      e => e.name.toLowerCase() === name,\r\n    );\r\n  };\r\n\r\n  reset = () => this.setState({ contact: { name: '', number: '' } });\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { onSaveContacts } = this.props;\r\n    const { contact } = this.state;\r\n    this.isContactExists(contact.name)\r\n      ? alert(`Contact ${contact.name} already exists.`)\r\n      : onSaveContacts(contact);\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    const { contact } = this.state;\r\n    const { handleChange } = this;\r\n    return (\r\n      <div className={s.container}>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label className={s.label}>\r\n            Name\r\n            <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={contact.name}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n          <label className={s.label}>\r\n            Number\r\n            <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={contact.number}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n\r\n          <button className={s.btn} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({ state });\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return { onSaveContacts: contact => dispatch(addContact(contact)) };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// ================================= 4 hw =======================================\r\n\r\n// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import s from '../ContactForm/ContactForm.module.css';\r\n\r\n// export default class ContactForm extends Component {\r\n//   static defaultProps = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   static propTypes = {\r\n//     contacts: PropTypes.array,\r\n//     name: PropTypes.string,\r\n//     number: PropTypes.string,\r\n//   };\r\n\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   handleChange = (e) => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.OnSaveContacts(this.state);\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className={s.container}>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <label className={s.label}>\r\n//             Name\r\n//             <input\r\n//               className={s.input}\r\n//               type=\"text\"\r\n//               name=\"name\"\r\n//               value={this.state.name}\r\n//               onChange={this.handleChange}\r\n//             />\r\n//           </label>\r\n//           <label className={s.label}>\r\n//             Number\r\n//             <input\r\n//               className={s.input}\r\n//               type=\"text\"\r\n//               name=\"number\"\r\n//               value={this.state.number}\r\n//               onChange={this.handleChange}\r\n//             />\r\n//           </label>\r\n\r\n//           <button className={s.btn} type=\"submit\">\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    {/* Find contacts by name: */}\r\n    <input\r\n      className={s.input}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder=\"Find contacts by name\"\r\n    />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n// ================================= 4 hw =======================================\r\n// ================================= 4 hw =======================================\r\n// ================================= 4 hw =======================================\r\n\r\n// import React from 'react';\r\n// import s from './Filter.module.css';\r\n\r\n// const Filter = ({ value, onChange }) => (\r\n//   <label>\r\n//     {/* Find contacts by name: */}\r\n//     <input\r\n//       className={s.input}\r\n//       type=\"text\"\r\n//       value={value}\r\n//       onChange={onChange}\r\n//       placeholder=\"Find contacts by name\"\r\n//     />\r\n//   </label>\r\n// );\r\n\r\n// export default Filter;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ visibleContacts, onDeleteContact }) => {\r\n  // console.log(filterContactsBgetFName);\r\n  return (\r\n    <ul className={s.list}>\r\n      {visibleContacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li className={s.item} key={id}>\r\n            <span className={s.text}> {name} : </span>\r\n            <span className={s.text}> {number} </span>\r\n            <button className={s.btn} onClick={() => onDeleteContact(id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst getFilterContactsByName = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLocaleLowerCase();\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLocaleLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  visibleContacts: getFilterContactsByName(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return { onDeleteContact: id => dispatch(deleteContact(id)) };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n// ================================= 4 hw =======================================\r\n// ================================= 4 hw =======================================\r\n// ================================= 4 hw =======================================\r\n\r\n// import React from 'react';\r\n// import s from './ContactList.module.css';\r\n\r\n// // import s from '../ContactList/ContactList.module.css';\r\n\r\n// const ContactList = ({ contacts, onDeleteContact }) => {\r\n//   // console.log(contacts);\r\n\r\n//   return (\r\n//     <>\r\n//       <ul className={s.list}>\r\n//         {contacts.map(({ id, name, number }) => (\r\n//           <li className={s.item} key={id}>\r\n//             <span className={s.text}> {name} : </span>\r\n//             <span className={s.text}> {number} </span>\r\n\r\n//             <button className={s.btn} onClick={() => onDeleteContact(id)}>\r\n//               Delete\r\n//             </button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ContactList;\r\n","import ContactForm from './components/ContactForm/ContactForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\n\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">Phonebook</h1>\r\n      <ContactForm />\r\n      <h2 className=\"title\">Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\n// ====================================================================================\r\n// =================================================================================\r\n// ================================= 4 hw =======================================\r\n// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import ContactForm from './components/ContactForm/ContactForm';\r\n// import Filter from './components/Filter/Filter';\r\n// import ContactList from './components/ContactList/ContactList';\r\n\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\n// import './App.css';\r\n\r\n// class App extends Component {\r\n//   static defaultProps = {\r\n//     contacts: [],\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   static propTypes = {\r\n//     contacts: PropTypes.arrayOf(\r\n//       PropTypes.shape({\r\n//         id: PropTypes.string.isRequired,\r\n//         name: PropTypes.string,\r\n//         number: PropTypes.string,\r\n//       }),\r\n//     ),\r\n//   };\r\n\r\n//   state = {\r\n//     contacts: [\r\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//     ],\r\n//     filter: '',\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     // console.log('App componentDidMount');\r\n\r\n//     const getContacts = localStorage.getItem('contacts');\r\n//     // console.log(getContacts);\r\n\r\n//     const parsedContacts = JSON.parse(getContacts);\r\n//     // console.log(parsedContacts);\r\n\r\n//     if (parsedContacts) {\r\n//       this.setState({ contacts: parsedContacts });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     console.log('App componentDidUpdate');\r\n\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       console.log('Обновилось поле contacts, записываю contacts в хранилище ');\r\n\r\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   formSubmitHandler = data => {\r\n//     const myContacts = {\r\n//       id: uuidv4(),\r\n//       name: data.name,\r\n//       number: data.number,\r\n//     };\r\n\r\n//     // Запрещаем пользователю возможность добавлять контакты,\r\n//     // имена которых уже есть в телефонной книге\r\n\r\n//     const getContacts = this.state.contacts.map(contact =>\r\n//       contact.name.toLocaleLowerCase(),\r\n//     );\r\n\r\n//     const isGetContactAlredy = getContacts.includes(\r\n//       data.name.toLocaleLowerCase(),\r\n//     );\r\n\r\n//     if (isGetContactAlredy) {\r\n//       alert(`${data.name} is already in contacts!`);\r\n//     } else {\r\n//       this.setState(prevState => {\r\n//         return {\r\n//           contacts: [myContacts, ...prevState.contacts],\r\n//         };\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // Функционал кнопки удаления контакта\r\n\r\n//   deleteContact = contactId => {\r\n//     this.setState(prevState => ({\r\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n//     }));\r\n//   };\r\n\r\n//   changeFilter = e => {\r\n//     this.setState({ filter: e.currentTarget.value });\r\n//   };\r\n\r\n//   // берем фтльтр и на базе стейта\r\n//   // составляем и рисуем новую коллекцию\r\n//   getFiltredContacts = () => {\r\n//     const { contacts } = this.state;\r\n\r\n//     const normalizedFilter = this.state.filter.toLowerCase();\r\n\r\n//     // возвращаем только те контакты, свойство \"name\", которых\r\n//     // включает в себя текущее значение фильтра\r\n//     return contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n//   };\r\n\r\n//   render() {\r\n//     const { filter } = this.state;\r\n//     const filtredContacts = this.getFiltredContacts();\r\n//     const totalContactsCount = contacts.length;\r\n\r\n//     return (\r\n//       <>\r\n//         <h1 className=\"title\">Phonebook</h1>\r\n//         <ContactForm OnSaveContacts={this.formSubmitHandler} />\r\n//         <h2 className=\"title\">Contacts</h2>\r\n//         <Filter value={filter} onChange={this.changeFilter} />\r\n\r\n//         {/* <div>\r\n//           <p>All contacts: {totalContactsCount}</p>\r\n//         </div> */}\r\n\r\n//         <ContactList\r\n//           contacts={filtredContacts}\r\n//           onDeleteContact={this.deleteContact}\r\n//         />\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst defaultContacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst itemsReducer = createReducer(defaultContacts, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\n// ================================================================\r\n// =======  REDUX without toolkit  ================================\r\n// ================================================================\r\n\r\n// import { combineReducers } from 'redux';\r\n// import * as types from './contacts-types';\r\n\r\n// const defaultContacts = [\r\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n// ];\r\n\r\n// const itemsReducer = (state = defaultContacts, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// =======================  REDUX  ================================\r\n// ================================================================\r\n// ================================================================\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// // const store = createStore(\r\n// //   rootReducer,\r\n// //   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n// // );\r\n\r\n// export default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport './index.css';\r\n\r\n// console.log('Our store: ', store.getState());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__3Y8o7\",\"label\":\"ContactForm_label__3uMi1\",\"input\":\"ContactForm_input__1H3B3\",\"btn\":\"ContactForm_btn__2GEMO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2RKW3\",\"item\":\"ContactList_item__392xU\",\"text\":\"ContactList_text__2cvfB\",\"btn\":\"ContactList_btn__3qHgx\"};"],"sourceRoot":""}